def low_pass_filter(input_data):
    a = [0.0007402732643054117,
    -0.0007116178196449282,
    -0.0012364542225753877,
    0.0004878382037768346,
    0.001762355408397323,
    -4.42067370785638e-18,
    -0.002215182400043849,
    -0.0007717219779807554,
    0.002468118275890691,
    0.0017997462427444813,
    -0.002385864864076639,
    -0.0029997753194695915,
    0.0018453409331850108,
    0.004228422134073137,
    -0.0007592690890261643,
    -0.005289349745070121,
    -0.0009003571537489589,
    0.005948391131440519,
    0.0030822569848409777,
    -0.005956801424111659,
    -0.00564241768842927,
    0.005080467069416566,
    0.008339545358107981,
    -0.003131762701341885,
    -0.01084034550601907,
    1.3106206228765793e-17,
    0.012733594561465547,
    0.004323800421297494,
    -0.013549309312476557,
    -0.009731690323690397,
    0.012775497060241557,
    0.015996022350404576,
    -0.009858263926207278,
    -0.022780555925105705,
    0.004155841182759176,
    0.029665112243643956,
    0.005226581766628221,
    -0.036181637361030625,
    -0.019949557006721064,
    0.04185792449918842,
    0.044243745670944155,
    -0.04626408217804201,
    -0.09396783582341778,
    0.04905629457673092,
    0.3142499866912212,
    0.45011339147505103,
    0.3142499866912212,
    0.04905629457673092,
    -0.09396783582341778,
    -0.04626408217804201,
    0.044243745670944155,
    0.04185792449918842,
    -0.019949557006721064,
    -0.036181637361030625,
    0.005226581766628221,
    0.029665112243643956,
    0.004155841182759176,
    -0.022780555925105705,
    -0.009858263926207278,
    0.015996022350404576,
    0.012775497060241557,
    -0.009731690323690397,
    -0.013549309312476557,
    0.004323800421297494,
    0.012733594561465547,
    1.3106206228765793e-17,
    -0.01084034550601907,
    -0.003131762701341885,
    0.008339545358107981,
    0.005080467069416566,
    -0.00564241768842927,
    -0.005956801424111659,
    0.0030822569848409777,
    0.005948391131440519,
    -0.0009003571537489589,
    -0.005289349745070121,
    -0.0007592690890261643,
    0.004228422134073137,
    0.0018453409331850108,
    -0.0029997753194695915,
    -0.002385864864076639,
    0.0017997462427444813,
    0.002468118275890691,
    -0.0007717219779807554,
    -0.002215182400043849,
    -4.42067370785638e-18,
    0.001762355408397323,
    0.0004878382037768346,
    -0.0012364542225753877,
    -0.0007116178196449282,
    0.0007402732643054117]
    #Reading the WAV file

    N_conv = len(a)
    new_data =  np.zeros(len(input_data))
    data = np.zeros(len(input_data)+N_conv)

    #Creating the samples including a N length block of zeros
    for i in range(len(input_data)):
        data[i+N_conv] = input_data[i]

    #Outer loop for each sample
    for i in range(len(data)):
        #For calculating the sum of multiplication for the filter.
        total = 0
        for j in range(N_conv):
            total += a[j]*data[i-j] 
        # Skipping N block of zeros   
        if i-N_conv>=0:
            new_data[i-N_conv] = total
        
    #Decimation
    final_data = new_data.astype(input_data.dtype)
    return final_data